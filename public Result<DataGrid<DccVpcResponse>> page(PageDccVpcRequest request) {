public Result<DataGrid<DccVpcResponse>> page(PageDccVpcRequest request) {
        // 1. 参数校验
        HibernateValidatorHelper.verify(request);

        // 2. 构建查询条件并执行分页查询
        LambdaQueryWrapper<DccVpcPo> queryWrapper = new LambdaQueryWrapper<DccVpcPo>()
                .eq(request.getDccId() != null, DccVpcPo::getDccId, request.getDccId())
                .in(CollectionUtils.isNotEmpty(request.getVpcIds()),
                        DccVpcPo::getVpcId, request.getVpcIds())
                .eq(request.getRegionId() != null, DccVpcPo::getRegionId, request.getRegionId())
                .eq(DccVpcPo::getIsDelete, DeletedEnum.NORMAL.getCode())
                .orderByDesc(DccVpcPo::getAddTime);

        Page<DccVpcPo> dccVpcPoPage = dccVpcMapper.selectPage(
                new Page<>(request.getCurrent(), request.getPageSize()),
                queryWrapper);

        // 3. 转换基础数据
        DataGrid<DccVpcResponse> responseGrid = BeanCopyUtils.copyPage(
                dccVpcPoPage,
                DccVpcResponse.class);

        // 4. 补充VPC详细信息
        List<DccVpcResponse> records = responseGrid.getRecords();
        if (CollectionUtils.isEmpty(records)) {
            return Result.success(responseGrid);
        }

        // 存放所有VPC详情信息的map
        Map<Long, VpcListResp> vpcMap = new HashMap<>();
        
        // 如果请求中没有指定regionId，则按regionId分组查询
        if (request.getRegionId() == null) {
            // 按regionId分组VPC
            Map<Integer, List<DccVpcResponse>> regionVpcMap = records.stream()
                    .filter(vpc -> vpc.getRegionId() != null)
                    .collect(Collectors.groupingBy(DccVpcResponse::getRegionId));
            
            // 针对每个regionId分别查询
            for (Map.Entry<Integer, List<DccVpcResponse>> entry : regionVpcMap.entrySet()) {
                Integer regionId = entry.getKey();
                List<DccVpcResponse> regionVpcs = entry.getValue();

                // 准备VPC查询请求
                VpcListReq vpcListReq = new VpcListReq();
                vpcListReq.setVpcIdList(regionVpcs.stream()
                        .map(DccVpcResponse::getVpcId)
                        .collect(Collectors.toList()));
                vpcListReq.setRoomId(regionId);

                // 查询VPC详情
                Result<List<VpcListResp>> vpcListResult = vpcService.list(vpcListReq);
                if (!vpcListResult.isSuccess()) {
                    log.error("VPC列表查询失败, regionId: {}, 请求参数: {}, 响应值: {}",
                            regionId, JSON.toJSONString(vpcListReq), JSON.toJSONString(vpcListResult));
                    throw new BizException(vpcListResult.getCode(), vpcListResult.getMessage());
                }

                // 将当前region的VPC信息合并到总map中
                Map<Long, VpcListResp> regionVpcDetailMap = vpcListResult.getData().stream()
                        .collect(Collectors.toMap(
                                VpcListResp::getVpcId,
                                vpc -> vpc,
                                (v1, v2) -> v1
                        ));
                vpcMap.putAll(regionVpcDetailMap);
            }
            
            // 处理regionId为null的记录
            List<DccVpcResponse> nullRegionVpcs = records.stream()
                    .filter(vpc -> vpc.getRegionId() == null)
                    .collect(Collectors.toList());
                    
            if (!nullRegionVpcs.isEmpty()) {
                log.warn("发现regionId为null的VPC记录: {}", nullRegionVpcs.size());
            }
        } else {
            // 已指定regionId，直接查询所有VPC
            VpcListReq vpcListReq = new VpcListReq();
            vpcListReq.setVpcIdList(records.stream()
                    .map(DccVpcResponse::getVpcId)
                    .collect(Collectors.toList()));
            vpcListReq.setRoomId(request.getRegionId()); // 使用请求中的regionId

            // 查询VPC详情
            Result<List<VpcListResp>> vpcListResult = vpcService.list(vpcListReq);
            if (!vpcListResult.isSuccess()) {
                log.error("VPC列表查询失败, 请求参数: {}, 响应值: {}",
                        JSON.toJSONString(vpcListReq),
                        JSON.toJSONString(vpcListResult));
                throw new BizException(vpcListResult.getCode(), vpcListResult.getMessage());
            }

            // 使用Map优化查找效率
            vpcMap = vpcListResult.getData().stream()
                    .collect(Collectors.toMap(
                            VpcListResp::getVpcId,
                            vpc -> vpc,
                            (v1, v2) -> v1
                    ));
        }

        // 更新VPC详情
        for (DccVpcResponse dccVpc : records) {
            VpcListResp vpc = vpcMap.get(dccVpc.getVpcId());
            if (vpc != null) {
                dccVpc.setVpcName(vpc.getName());
                dccVpc.setGateway(vpc.getGateway());
                dccVpc.setSubnetMask(vpc.getSubnetMask());
                dccVpc.setVlanId(vpc.getVlanId());
                dccVpc.setAvailableIp(getIpSize(vpc));
            }
        }

        return Result.success(responseGrid);
    } 